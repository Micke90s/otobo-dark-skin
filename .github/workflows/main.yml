name: Release
run-name: Release ${{ github.repository }} - ${{ github.ref }}
on:
  push:
    # Strict versioning - see OTOBO (./Kernel/System/Console/Command/Dev/Package/Build.pm)
    tags:
      #- 'v\d{1,4}.\d{1,4}.\d{1,4}'
      - 'v[0-9][0-9]?[0-9]?[0-9]?.[0-9][0-9]?[0-9]?[0-9]?.[0-9][0-9]?[0-9]?[0-9]?'
jobs:
  release:
    runs-on: ubuntu-latest
    container: 
      image: rotheross/otobo:latest-11_0
      # Running as root is required as the checkout will fail with the user otobo
      options: --user 0 --entrypoint ""
    env:
      GIT_STRATEGY: clone
    # OTOBO requires a redis service for build
    services:
      redis: 
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    # Steps for building the OTOBO package
    steps:
      # Download a copy of the code
      - name: Check out repository code
        uses: actions/checkout@v4.1.0
        with:
          ref: ${{ github.ref }}
          set-safe-directory: true
      # Installing OTOBO inside of the container 
      - name: Install OTOBO
        shell: bash
        run: su otobo -c "/opt/otobo_install/entrypoint.sh copy_otobo_next"
      # Set VERSION variable from tag
      - name: Get version
        shell: bash      
        run: |
             TAG=${{ github.ref }}
             VERSION=${TAG#refs/tags/v}
             echo "VERSION=${VERSION}" >> $GITHUB_ENV      
      # Build
      - name: Build project
        id: build
        shell: bash      
        run: |
             mkdir ./build
             chmod 777 ./build
             SOPMFILE=$(ls -t ./*.sopm | head -n2 )
             su otobo -c "/opt/otobo/bin/otobo.Console.pl Dev::Package::Build ${SOPMFILE} ./build --version ${VERSION} --module-directory ."
             OPMFILE=$(basename $(ls -t ./build/*.opm | head -n2 ) )
             echo "ARTIFACT_PATH=./build/${OPMFILE}" >> $GITHUB_OUTPUT
             echo "ARTIFACT_NAME=${OPMFILE}" >> $GITHUB_OUTPUT
      # Release
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      # Upload the OPM-Package to the created release
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build.outputs.ARTIFACT_PATH }}
          asset_name: ${{ steps.build.outputs.ARTIFACT_NAME }}
          asset_content_type: application/xml
